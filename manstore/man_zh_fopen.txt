FOPEN(3) Linux 程序员手册 FOPEN(3)

姓名
fopen、fdopen、freopen - 流打开函数

概要
#include <stdio.h>

FILE *fopen(const char *路径名, const char *模式);

文件 *fdopen(int fd, const char *mode);

FILE *freopen(const char *路径名, const char *模式, FILE *流);

glibc 的功能测试宏要求（请参阅 feature_test_macros(7)）：

fdopen(): _POSIX_C_SOURCE

描述
fopen() 函数打开名称为路径名指向的字符串的文件
并将流与其关联。

参数模式指向以以下序列之一开头的字符串
（可能后面跟着附加字符，如下所述）：

r 打开文本文件进行读取。该流位于开头
文件。

r+ 打开以进行读取和写入。该流位于开头
文件。

w 将文件截断为零长度或创建用于写入的文本文件。流是
位于文件的开头。

w+ 打开以进行读取和写入。如果文件不存在则创建，
否则它会被截断。该流位于该流的开头
文件。

a 打开以追加（写入文件末尾）。如果存在则创建该文件
不存在。该流位于文件末尾。

a+ 打开以进行读取和追加（写入文件末尾）。该文件已创建
如果不存在则已删除。输出总是附加到末尾
文件。使用此功能时，POSIX 没有说明初始读取位置
模式。对于glibc来说，读取的初始文件位置是开头
文件的位置，但对于 Android/BSD/MacOS，读取的初始文件位置-
ing 位于文件末尾。

模式字符串还可以包含字母“b”作为最后一个字符或作为
所描述的任何两个字符字符串中的字符之间的字符
多于。这严格是为了兼容C89，没有任何作用；'b' 是
在所有符合 POSIX 的系统上被忽略，包括 Linux。（其他系统可能会处理
文本文件和二进制文件不同，添加“b”可能是一个好主意，如果
您对二进制文件进行 I/O，并期望您的程序可以移植到非 UNIX
环境。）

有关模式的 glibc 扩展的详细信息，请参阅下面的注释。

任何创建的文件都将具有模式 S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH
| S_IWOTH (0666)，由进程的 umask 值修改（请参阅 umask(2)）。

读取和写入可以以任何顺序在读/写流上混合。注意
ANSI C 要求在输出和输入之间插入一个文件定位函数。
put，除非输入操作遇到文件结尾。（如果这个条件不
满足，则允许读取返回除最重读之外的写入结果
分。）因此这是一个很好的实践（在 Linux 下有时确实是必要的）
在写入和读取操作之间放置 fseek(3) 或 fgetpos(3) 操作
这样的流。此操作可能是明显的无操作（如 fseek(..., 0L,
SEEK_CUR）调用其同步副作用）。

以追加模式打开文件（a 作为模式的第一个字符）会导致所有子项
对该流的后续写入操作发生在文件末尾，就像在文件末尾一样
称呼：

fseek(流, 0, SEEK_END);

与流关联的文件描述符就像通过调用 open(2) 一样打开
具有以下标志：

┌──────────────┬────────────────────────────────┐
│fopen() 模式 │ open() 标志 │
├──────────────┼────────────────────────────────┤
│ r │ O_RDONLY │
├──────────────┼────────────────────────────────┤
│ w │ O_WRONLY | O_CREAT | O_TRUNC │
├──────────────┼────────────────────────────────┤
│ a │ O_WRONLY | O_CREAT | O_APPEND │
├──────────────┼────────────────────────────────┤
│ r+ │ O_RDWR │
├──────────────┼────────────────────────────────┤
│ w+ │ O_RDWR | O_CREAT | O_TRUNC │
├──────────────┼────────────────────────────────┤
│ a+ │ O_RDWR | O_CREAT | O_APPEND │
└──────────────┴────────────────────────────────┘
fdopen()
fdopen() 函数将流与现有文件描述符 fd 相关联。
流的模式（值“r”、“r+”、“w”、“w+”、“a”、“a+”之一）必须是
与文件描述符的模式兼容。文件位置指示器
新的流被设置为属于 fd 的流，并且错误和文件结束指示
猫被清除。模式“w”或“w+”不会导致文件截断。这
文件描述符不会被复制，并且当流创建时将被关闭
fdopen() 已关闭。将 fdopen() 应用于共享内存对象的结果是
不明确的。

freopen()
freopen() 函数打开文件，其名称是路径指向的字符串-
name 并将流指向的流与其关联。原始流
（如果存在）已关闭。mode 参数的使用方式与 fopen() 函数中一样
。

如果路径名参数是空指针，freopen() 会更改路径的模式
流至模式中指定的流；也就是说，freopen() 重新打开路径名
与流关联。此行为的规范已添加到
C99标准，其中规定：

在这种情况下，与流关联的文件描述符不需要
如果调用 freopen() 成功，则关闭。它是实现定义的
哪些模式的改变是允许的（如果有的话），以及在什么情况下。

freopen() 函数的主要用途是更改与
标准文本流（stderr、stdin 或 stdout）。

返回值
成功完成后，fopen()、fdopen() 和 freopen() 返回一个 FILE 指针。
否则，返回 NULL 并设置 errno 来指示错误。

错误
EINVAL 提供给 fopen()、fdopen() 或 freopen() 的模式无效。

fopen()、fdopen() 和 freopen() 函数也可能失败并为任何函数设置 errno
为例程 malloc(3) 指定的错误。

fopen() 函数也可能失败并为任何指定的错误设置 errno
对于例程 open(2)。

fdopen() 函数也可能失败并为任何指定的错误设置 errno
对于例程 fcntl(2)。

freopen() 函数也可能会失败并为任何指定的错误设置 errno
对于例程 open(2)、fclose(3) 和 fflush(3)。

属性
有关本节中使用的术语的解释，请参阅 attribute(7)。

┌──────────────────────────────┬──────────────────┬──── ──────┐
│接口 │属性 │值 │
├──────────────────────────────┼──────────────────┼──── ──────┤
│fopen(), fdopen(), freopen() │ 线程安全 │ MT-Safe │
└──────────────────────────────┴──────────────────┴──── ──────┘
符合
fopen()、freopen()：POSIX.1-2001、POSIX.1-2008、C89、C99。

fdopen()：POSIX.1-2001、POSIX.1-2008。

笔记
Glibc 注释
GNU C 库允许对 mode 中指定的字符串进行以下扩展：

c（自 glibc 2.3.3 起）
不要进行打开操作，或者后续的读写操作，
线程取消点。fdopen() 会忽略此标志。

e（自 glibc 2.7 起）
使用 O_CLOEXEC 标志打开文件。有关详细信息，请参阅 open(2)。
fdopen() 会忽略此标志。

m（自 glibc 2.3 起）
尝试使用 mmap(2) 而不是 I/O 系统调用来访问文件
（读（2），写（2））。目前，仅尝试对文件使用 mmap(2)
打开阅读。

x 以独占方式打开文件（如 open(2) 的 O_EXCL 标志）。如果文件
已经存在，fopen() 失败，并将 errno 设置为 EEXIST。这个标志是ig-
诺德用于 fdopen()。

除了上述字符外，fopen() 和 freopen() 还支持以下字符
模式中的语法：

,ccs=字符串

给定的字符串被视为编码字符集的名称，流是
标记为面向广泛。此后，内部转换函数将 I/O 转换为
和来自字符集字符串。如果未指定 ,ccs=string 语法，
那么流的宽方向由第一个文件操作决定。
如果该操作是宽字符操作，则该流被标记为宽字符
ented，并加载转换为编码字符集的函数。

错误
当解析模式中的各个标志字符时（即前面的字符）
“ccs”规范），fopen() 和 freopen() 限制的 glibc 实现
在模式中检查的字符数为 7（或者，在 2.14 之前的 glibc 版本中，
到 6，这不足以包括可能的规范，例如“rb+cmxe”）。
fdopen() 的当前实现在模式中最多解析 5 个字符。

也可以看看
打开（2），fclose（3），fileno（3），fmemopen（3），fopencookie（3），open_memstream（3）

版画
本页是 Linux 手册页项目 5.10 版的一部分。的描述
项目、有关报告错误的信息以及此页面的最新版本，
可以在 https://www.kernel.org/doc/man-pages/ 找到。

GNU 2020-12-21 FOPEN(3)
