STRTOK(3) Linux 程序员手册 STRTOK(3)

姓名
strtok、strtok_r - 从字符串中提取标记

概要
#include <字符串.h>

char *strtok(c​​har *str, const char *delim);

char *strtok_r(char *str, const char *delim, char **saveptr);

glibc 的功能测试宏要求（请参阅 feature_test_macros(7)）：

strtok_r(): _POSIX_C_SOURCE
|| /* Glibc 版本 <= 2.19: */ _BSD_SOURCE || _SVID_来源

描述
strtok() 函数将字符串分解为零个或多个非空标记的序列。第一次致电时
strtok()，要解析的字符串应该在str中指定。在每个后续调用中应该解析
相同的字符串，str 必须为 NULL。

delim 参数指定一组字节，用于分隔已解析字符串中的标记。呼叫者可能会
在解析同一字符串的连续调用中，在 delim 中指定不同的字符串。

每次调用 strtok() 都会返回一个指向包含下一个标记的以 null 结尾的字符串的指针。这个字符串
不包括定界字节。如果找不到更多标记，strtok() 将返回 NULL。

对同一字符串进行操作的 strtok() 调用序列维护一个确定点的指针
从这里开始搜索下一个标记。第一次调用 strtok() 将此指针设置为指向
字符串的第一个字节。下一个标记的开始是通过向前扫描下一个非标记来确定的。
str 中的分隔符字节。如果找到这样的字节，则将其作为下一个标记的开始。如果没有这样的字节
找到，则不再有标记，并且 strtok() 返回 NULL。（空字符串或包含
因此，只有分隔符才会导致 strtok() 在第一次调用时返回 NULL。）

通过向前扫描直到找到下一个分隔符字节或直到找到每个标记的结尾。
遇到终止空字节（'\0'）。如果找到分隔符字节，则用空字节覆盖它
终止当前令牌，strtok() 保存指向下一个字节的指针；将使用该指针
作为搜索下一个标记时的起点。在这种情况下，strtok() 返回一个指向
找到的令牌的开始。

从上面的描述可以看出，解析的数据中的两个或多个连续分隔符字节的序列
字符串被认为是单个分隔符，并且字符串开头或结尾的分隔符字节是
被忽略。换句话说：strtok() 返回的标记始终是非空字符串。因此，例如，
给定字符串“aaa;;bbb,”，连续调用指定分隔符字符串“;,”的 strtok() 将返回
字符串“aaa”和“bbb”，然后是一个空指针。

strtok_r() 函数是 strtok() 的可重入版本。saveptr 参数是一个指向 char * 的指针
strtok_r() 在内部使用的变量，以便维护连续调用之间的上下文
解析同一个字符串。

第一次调用 strtok_r() 时，str 应该指向要解析的字符串，*saveptr 的值为 ig‐
诺德（但请参阅注释）。在后续调用中，str 应该为 NULL，而 saveptr （以及它指向的缓冲区）
to) 自上次调用以来应保持不变。

可以使用指定不同的 strtok_r() 调用序列同时解析不同的字符串
saveptr 参数。

返回值
strtok() 和 strtok_r() 函数返回指向下一个标记的指针，如果没有更多标记，则返回 NULL。

属性
有关本节中使用的术语的解释，请参阅 attribute(7)。

┌────────────┬────────────────┬────────────────────── ──┐
│接口 │属性 │值 │
├────────────┼────────────────┼────────────────────── ──┤
│strtok() │ 线程安全 │ MT-不安全竞赛：strtok │
├────────────┼────────────────┼────────────────────── ──┤
│strtok_r() │ 线程安全 │ MT安全 │
└────────────┴────────────────┴────────────────────── ──┘
符合
strtok()
POSIX.1-2001、POSIX.1-2008、C89、C99、SVr4、4.3BSD。

strtok_r()
POSIX.1-2001、POSIX.1-2008。

笔记
在某些实现中，*saveptr 在第一次调用 strtok_r() 时需要为 NULL
解析字符串。

错误
使用这些功能时要小心。如果您确实使用它们，请注意：

* 这些函数修改它们的第一个参数。

* 这些函数不能用于常量字符串。

* 定界字节的标识丢失。

* strtok() 函数在解析时使用静态缓冲区，因此它不是线程安全的。如果出现这种情况，请使用 strtok_r()
对你来说很重要。

例子
下面的程序使用嵌套循环，该循环使用 strtok_r() 将字符串分解为 to- 的两级层次结构
肯斯。第一个命令行参数指定要解析的字符串。第二个参数指定
用于将该字符串分隔为“主要”标记的分隔符字节。第三个参数指定
用于将“主要”标记分隔成子标记的分隔符字节。

该程序产生的输出示例如下：

$ ./a.out 'a/bbb///cc;xxx:yyy:' ':;' '/'
1：a/bbb///cc
--> 一个
--> bb
--> 抄送
2：xxx
--> xxx
3: yyy
--> yyy

节目来源

#include <stdio.h>
#include <stdlib.h>
#include <字符串.h>

整数
main(int argc, char *argv[])
{
char *str1、*str2、*令牌、*子令牌；
字符 *saveptr1, *saveptr2;

if (argc != 4) {
fprintf(stderr, "用法: %s string delim subdelim\n",
argv[0]);
退出（EXIT_FAILURE）；
}

for (int j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
令牌 = strtok_r(str1, argv[2], &saveptr1);
如果（令牌== NULL）
休息;
printf("%d: %s\n", j, 令牌);

for (str2 = 令牌; ; str2 = NULL) {
子令牌 = strtok_r(str2, argv[3], &saveptr2);
if (子代币== NULL)
休息;
printf(" --> %s\n", 子标记);
}
}

退出（EXIT_SUCCESS）；
}

另一个使用 strtok() 的示例程序可以在 getaddrinfo_a(3) 中找到。

也可以看看
索引(3)、memchr(3)、rindex(3)、strchr(3)、字符串(3)、strpbrk(3)、strsep(3)、strspn(3)、strstr(3)、wcstok(3)

版画
本页是 Linux 手册页项目 5.10 版的一部分。项目描述、信息
关于报告错误以及此页面的最新版本，可以在以下位置找到
https://www.kernel.org/doc/man-pages/。

GNU 2020-11-01 STRTOK(3)
