TIME(2) Linux 程序员手册 TIME(2)

姓名
time - 获取以秒为单位的时间

概要
#include <时间.h>

time_t 时间(time_t *tloc);

描述
time() 返回时间为自纪元 1970-01-01 00:00:00 +0000 (UTC) 以来的秒数。

如果tloc非NULL，则返回值也存储在tloc指向的内存中。

返回值
成功后，返回自 Epoch 以来的时间值（以秒为单位）。出错时，返回 ((time_t) -1)，
并正确设置 errno。

错误
EFAULT tloc 指向可访问地址空间之外（但请参阅错误）。

在 C 库 time() 包装函数调用由
vdso(7)（这样就不会陷入内核），无效地址可能会触发 SIGSEGV
信号。

符合
SVr4、4.3BSD、C89、C99、POSIX.1-2001。POSIX 没有指定任何错误条件。

笔记
POSIX.1 使用一个公式定义自 Epoch 以来的秒数，该公式近似于
指定时间和纪元。该公式考虑了所有被均分的年份这一事实
能被 4 整除的年份是闰年，但能被 100 整除的年份就不是闰年，除非它们也
能被 400 整除，在这种情况下，它们是闰年。该值与实际数量不一样
时间和纪元之间的秒数，因为闰秒并且不需要系统时钟
与标准参考同步。其目的是解释自
Epoch值保持一致；请参阅 POSIX.1-2008 基本原理 A.4.15 了解更多基本原理。

在 Linux 上，即使在 ABI 上，对 tloc 指定为 NULL 的 time() 调用也不会失败并出现错误 EOVERFLOW
其中 time_t 是一个带符号的 32 位整数，并且时钟滴答经过时间 2**31 (2038-01-19 03:14:08 UTC，ig‐
诺林闰秒）。（POSIX.1 允许，但不要求，在秒的情况下出现 EOVERFLOW 错误
因为纪元不适合 time_t。）相反，当系统
时间超出 time_t 范围。打算在 2038 年之后运行的应用程序应使用 time_t 更宽的 ABI
大于 32 位。

错误
此系统调用的错误返回与时间为几秒的成功报告没有区别。
在 Epoch 之前的 onds 中，因此 C 库包装函数永远不会将 errno 设置为此调用的结果。

tloc 参数已过时，在新代码中应始终为 NULL。当tloc为NULL时，调用不能
失败。

C 库/内核差异
在某些架构上，vdso(7) 中提供了 time() 的实现。

也可以看看
日期（1），gettimeofday（2），ctime（3），ftime（3），时间（7），vdso（7）

版画
本页是 Linux 手册页项目 5.10 版的一部分。项目描述、信息
关于报告错误以及此页面的最新版本，可以在以下位置找到
https://www.kernel.org/doc/man-pages/。

Linux 2017-09-15 时代周刊(2)
